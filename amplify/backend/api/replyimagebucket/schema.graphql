type Image
  @model
  @key(
    name: "imagesByUserSub"
    fields: ["userSub"]
    queryField: "imagesByUserSub"
  )
  @auth(
    rules: [
      {allow: owner}
      {allow: private, operations: [read]}
      {allow: public, operations: [read]}
    ]
  ) {
  id: ID!
  keywords: [Keyword!]!
    @connection(keyName: "keywordsByImageId", fields: ["id"])
  fileName: String!
  fileExtension: String!
  userSub: String!
  key: ID!
  width: Int!
  height: Int!
}

type Keyword
  @model
  @key(
    name: "keywordsByImageId"
    fields: ["imageId", "text"]
    queryField: "keywordsByImageId"
  )
  @key(
    name: "keywordsByUserSub"
    fields: ["userSub"]
    queryField: "keywordsByUserSub"
  )
  @key(
    name: "keywordsByText"
    fields: ["text", "userSub"]
    queryField: "keywordsByText"
  )
  @auth(
    rules: [
      {allow: owner}
      {allow: private, operations: [read]}
      {allow: public, operations: [read]}
    ]
  ) {
  id: ID!
  imageId: ID!
  imageKey: ID!
  text: String!
  image: Image! @connection(fields: ["imageId"])
  userSub: String!
  width: Int!
  height: Int!
}

type KeywordInfo {
  id: ID!
  owner: String!
  imageId: ID!
  text: String!
  createdAt: String!
  updatedAt: String!
}

type Mutation {
  updateKeywordsOnImage(textList: [String], imageId: ID): [KeywordInfo]!
    @function(name: "replyImageBucketUpdateKeywordsOnImage-${env}")
  deleteImageAndItsKeywords(imageId: ID): ID
    @function(name: "replyImageBucketDeleteImageAndItsKeywords-${env}")
}
